#!/bin/sh
# tlp - power management functions

# ----------------------------------------------------------------------------
# Definitions
TLPVER=0.2.5
DEFAULT_FILE=/etc/default/tlp
ACPWR=/usr/bin/on_ac_power
ETHTOOL=/usr/sbin/ethtool
HDPARM=/sbin/hdparm
IWPRIV=/sbin/iwpriv
MODPRO=/sbin/modprobe
UDEVADM=/sbin/udevadm
PERL=/usr/bin/perl
SMAPI=tp_smapi
CDROM=/dev/cdrom
SMAPIDIR=/sys/devices/platform/smapi
LOGGER=/usr/bin/logger

# ----------------------------------------------------------------------------
# Functions

echo_debug () { # $1: msg
	if [ "$TLP_DEBUG" = "1" ]; then
		$LOGGER -p debug -t "tlp[$$]" "$1"
	fi
}

check_root () {
	if [ "$(id -u)" != "0" ]; then
		echo "Error: root privilege needed. Please call me with 'sudo'." 1>&2
		exit 1
	fi
}

check_tlp_enabled () { # ret: 0=disabled/1=enabled
	if [ ! "$TLP_ENABLE" = "1" ]; then
		echo "Error: tlp power save is disabled; set TLP_ENABLE=1 in /etc/default/tlp." 1>&2
		return 1
	else
		return 0
	fi
}

check_laptop_mode_tools () { # ret: 0=disabled/1=enabled
	[ -f /etc/default/acpi-support ] && . /etc/default/acpi-support
	if [ "$ENABLE_LAPTOP_MODE" = "true" -o -f /var/run/laptop-mode-tools/enabled ]; then
		echo "Error: tlp power save is disabled because laptop-mode-tools is active." 1>&2
		echo "       Set ENABLE_LAPTOP_MODE=false in /etc/default/acpi-support." 1>&2
		echo 1>&2
		return 1
	else
		return 0
	fi
}

read_defaults () {
	if [ -f $DEFAULT_FILE ]; then
		. $DEFAULT_FILE
	fi
}

load_tp_smapi () {
	$MODPRO $SMAPI > /dev/null 2>&1 
}

get_power_state () { # ret: 0=ac, 1=battery
	$ACPWR
	return $? 
}

set_laptopmode () { # $1: 0=ac mode, 1=battery mode
	if [ "$1" = "1" ]; then
		[ "${DISK_IDLE_SECS_ON_BAT:-undef}" = "undef" ] || \
		  echo $DISK_IDLE_SECS_ON_BAT > /proc/sys/vm/laptop_mode
	else
		[ "${DISK_IDLE_SECS_ON_AC:-undef}" = "undef" ] || \
		  echo $DISK_IDLE_SECS_ON_AC > /proc/sys/vm/laptop_mode
	fi
}

set_dirty_parms () { # $1: 0=ac mode, 1=battery mode
	# Some code adapted from laptop-mode-tools
	local age
	
	if [ "$1" = "1" ]; then
		if [ "${MAX_LOST_WORK_SECS_ON_BAT:-undef}" != "undef" ]; then
			age=$(($MAX_LOST_WORK_SECS_ON_BAT * 100))
		else
			age=1500
		fi

		echo $age > /proc/sys/vm/dirty_writeback_centisecs
		echo $age > /proc/sys/vm/dirty_expire_centisecs

		if [ -d /proc/sys/fs/xfs ]; then
			echo $age > /proc/sys/fs/xfs/age_buffer_centisecs
			echo $age > /proc/sys/fs/xfs/xfssyncd_centisecs
			echo 3000 > /proc/sys/fs/xfs/xfsbufd_centisecs
		fi

		echo 60 > /proc/sys/vm/dirty_ratio
		echo 1 > /proc/sys/vm/dirty_background_ratio
	else
		if [ "${MAX_LOST_WORK_SECS_ON_AC:-undef}" != "undef" ]; then
			age=$(($MAX_LOST_WORK_SECS_ON_AC * 100))
		else
			age=500
		fi
		
		echo $age > /proc/sys/vm/dirty_writeback_centisecs
		echo $age > /proc/sys/vm/dirty_expire_centisecs
		
		if [ -d /proc/sys/fs/xfs ]; then
			echo $age > /proc/sys/fs/xfs/age_buffer_centisecs
			echo $age > /proc/sys/fs/xfs/xfssyncd_centisecs
			echo 3000 > /proc/sys/fs/xfs/xfsbufd_centisecs
		fi

		echo 40 > /proc/sys/vm/dirty_ratio
		echo 10 > /proc/sys/vm/dirty_background_ratio
	fi
}

set_phc_controls () { 
	if [ -f "/sys/devices/system/cpu/cpu0/cpufreq/phc_controls" ]; then
		[ "${PHC_CONTROLS:-undef}" = "undef" ] || \
		  echo $PHC_CONTROLS > /sys/devices/system/cpu/cpu0/cpufreq/phc_controls
	fi
}

check_disk_hdparm_cap () { # $1: dev; ret: 0=none/1=available
    if [ -z "$($HDPARM -I /dev/$1 2>&1 | grep 'Invalid exchange')" ]; then
		return 0
	else
		return 1
	fi
}

echo_disk_model () { # $1: dev
	local model
	
	model=$($HDPARM -I /dev/$1 2>&1 | grep 'Model Number' | \
	  cut -f2 -d: | sed -r 's/^ *//' )
	echo "$model"
}

get_disk_apm_level () { # $1: dev; ret: apm
	local apm
	
	apm=$($HDPARM -I /dev/$1 2>&1 | grep 'Advanced power management level' | \
	      cut -f2 -d: | egrep "^ *[0-9]+ *$")
	if [ -n "$apm" ]; then
		return $apm
	else 
		return 0
	fi
}

set_disk_apm_level () { # $1: 0=ac mode, 1=battery mode
	local dev
	
	DISK_DEVICES=${DISK_DEVICES:=sda}
	for dev in $DISK_DEVICES; do
		if [ -b /dev/$dev ]; then
			check_disk_hdparm_cap $dev
			if [ $? = 0 ]; then
				if [ $1 = "1" ]; then
					[ "${DISK_APM_LEVEL_ON_BAT:-undef}" = "undef" ] || \
					  $HDPARM -B $DISK_APM_LEVEL_ON_BAT /dev/$dev > /dev/null 2>&1
				else
					[ "${DISK_APM_LEVEL_ON_AC:-undef}" = "undef" ] || \
					  $HDPARM -B $DISK_APM_LEVEL_ON_AC /dev/$dev > /dev/null 2>&1
				fi
			fi
		fi
	done
} 

set_sata_link_power () { # $1: 0=ac mode, 1=battery mode
	local i
	
	if [ "$1" = "1" ]; then
		[ "${SATA_LINKPWR_ON_BAT:-undef}" = "undef" ] && return 0
		pwr=$SATA_LINKPWR_ON_BAT
	else
		[ "${SATA_LINKPWR_ON_AC:-undef}" = "undef" ] && return 0
		pwr=$SATA_LINKPWR_ON_AC
	fi
	
	for i in /sys/class/scsi_host/host*/link_power_management_policy ; do
		if [ -f $i ]; then
			echo "$pwr" > $i
		fi
	done
} 

set_wifi_power_mode () { # $1: 0=ac mode, 1=battery mode
	local i
	
	if [ "$1" = "1" ]; then
		[ "${WIFI_PWR_ON_BAT:-undef}" = "undef" ] && return 0
		pwr=$WIFI_PWR_ON_BAT
	else
		[ "${WIFI_LINK_PWR_ON_AC:-undef}" = "undef" ] && return 0
		pwr=$WIFI_PWR_ON_AC
	fi
	
	# Intel 4965, 5100, ... (0=off, 1=min, 5=max)
	if [ -d /sys/bus/pci/drivers/iwlagn ]; then
		for i in /sys/bus/pci/drivers/iwlagn/* ; do
			[ -f $i/power_level ] && echo "$pwr" > $i/power_level
		done
	fi

	# Intel 3945agn (0=off, 1=min, 5=max)
	if [ -d /sys/bus/pci/drivers/iwl3945 ]; then
		for i in /sys/bus/pci/drivers/iwl3945/* ; do
			[ -f $i/power_level ] && echo "$pwr" > $i/power_level
		done
	fi

	# Intel 2200bg
	if [ -d /sys/bus/pci/drivers/ipw2200 ]; then
		for i in /sys/bus/pci/drivers/ipw2200/*/net/* ; do
			[ -e $i ] && $IWPRIV ${i##/*/} set_power $pwr > /dev/null 2>&1
		done
	fi
}

disable_wake_on_lan () {  
	[ "${WOL_DISABLE:-undef}" = "undef" ] && return 0
	
	if [ "$WOL_DISABLE" = "Y" ]; then
		$ETHTOOL -s eth0 wol d > /dev/null 2>&1
	else
		$ETHTOOL -s eth0 wol e > /dev/null 2>&1
	fi
}

set_sound_power_mode () {
	[ "${SOUND_POWER_SAVE:-undef}" = "undef" ] && return 0

	if [ -d /sys/module/snd_hda_intel ]; then
		echo "$SOUND_POWER_SAVE" > /sys/module/snd_hda_intel/parameters/power_save
		[ "${SOUND_POWER_SAVE_CONTROLLER:-undef}" = "undef" ] || \
		  echo "$SOUND_POWER_SAVE_CONTROLLER" > /sys/module/snd_hda_intel/parameters/power_save_controller 
	fi
		
	if [ -d /sys/module/snd_ac97_codec ]; then
		echo "$SOUND_POWER_SAVE" > /sys/module/snd_ac97_codec/parameters/power_save
	fi
}

enable_usb_suspend () {
	local usbdev
	
	if [ "$USB_AUTOSUSPEND" = "1" ]; then
		for usbdev in /sys/bus/usb/devices/*; do
			if [ -f $usbdev/power/autosuspend ]; then
				usbid="$(cat $usbdev/idVendor):$(cat $usbdev/idProduct)"
			
				if [ -n "$USB_BLACKLIST" -a "$USB_BLACKLIST" != "${USB_BLACKLIST#*$usbid}" ]; then
					echo "on" > $usbdev/power/level
				else
					echo "auto" > $usbdev/power/level
				fi
				echo 0 > $usbdev/power/autosuspend
			fi
		done
	fi
}

do_threshold () { # $1: treshold file, $2: new value
	if [ -n "$2" ]; then
		if [ "$(cat $1)" != "$2" ]; then
			echo $2 > $1
		fi
	fi
}

set_charge_thresholds () {
	[ -d /sys/devices/platform/smapi ] || return
	if [ "$(cat /sys/devices/platform/smapi/BAT0/installed)" = "1" ]; then
		do_threshold /sys/devices/platform/smapi/BAT0/start_charge_thresh "$START_CHARGE_THRESH_BAT0"
		do_threshold /sys/devices/platform/smapi/BAT0/stop_charge_thresh "$STOP_CHARGE_THRESH_BAT0"
	fi
	if [ "$(cat /sys/devices/platform/smapi/BAT1/installed)" = "1" ]; then
		do_threshold /sys/devices/platform/smapi/BAT1/start_charge_thresh "$START_CHARGE_THRESH_BAT1"
		do_threshold /sys/devices/platform/smapi/BAT1/stop_charge_thresh "$STOP_CHARGE_THRESH_BAT1"
	fi
}

poweroff_drivebay () { # $1: 0=conditional+quiet mode, 1=force+verbose mode
	# Some code adapted from http://www.thinkwiki.org/wiki/How_to_hotswap_UltraBay_devices
	local dock
	local optdrv
	
	# Run only if either explicitly enabled or forced 
	[ "$BAY_POWEROFF_ON_BAT" = "1" ] || [ "$1" = "1" ] || return 0

	# Find generic dock interface for bay
	dock=$(grep -l ata_bay /sys/devices/platform/dock.?/type)
	dock=${dock%%/type}
	if [ -z "$dock" -o ! -d "$dock" ]; then
		[ "$1" = "1" ] && echo "Error: cannot locate bay device."
		return 1
	fi

	# Check if bay is occupied
	if [ $(cat $dock/docked) = "0" ]; then
		[ "$1" = "1" ] && echo "No drive in bay (or power already off)."
	else 
		# Check for optical drive
		optdrv=$(readlink $CDROM)
		if [ -z "$optdrv" ]; then
			[ "$1" = "1" ] && echo "No optical drive in bay."
			return 0
		else
			optdrv="/dev/$optdrv"
			
			# Unmount media 
			umount -l $optdrv > /dev/null 2>&1
			
			# Power off drive
			$HDPARM -Y $optdrv > /dev/null 2>&1
			sleep 0.5
	
			# Unregister scsi device
			syspath="/sys$($UDEVADM info --query=path --name=$optdrv | $PERL -pe 's!/block/...$!!')"
			[ -n "$syspath" ] && echo 1 > $syspath/delete

			# Turn power off
			echo 1 > $dock/undock
			[ "$1" = "1" ] && echo "Bay is powered off now."
		fi
	fi
	
	return 0
}

cancel_discharge () { # called from trap
	echo 0 > $bdir/force_discharge
	echo "\nDischarging of battery $bat cancelled."
	exit 0
}

discharge_battery () { # $1: battery
	if [ ! -d $SMAPIDIR ]; then
		echo "Error: ThinkPad battery functions not available (missing tp_smapi kernel module)."
		return 1
	fi

	bat=$1
	bat=${bat:=BAT0} # default is BAT0
	bat=$(echo $bat | tr "[:lower:]" "[:upper:]")
	bdir=$SMAPIDIR/$bat
	
	if [ ! -f $bdir/installed ] || [ "$(cat $bdir/installed)" = "0" ]; then
		echo "Error: battery $bat not present."
		return 1
	fi
		
	echo 1 > $bdir/force_discharge
	trap cancel_discharge INT
	
	while [ "$(cat $bdir/force_discharge)" = "0" ]; do :; done

	while [ "$(cat $bdir/force_discharge)" = "1" ]; do
		clear
		echo "Currently discharging battery $bat:"
		echo "voltage            = $(cat $bdir/voltage) [mV]"
		echo "remaining percent  = $(cat $bdir/remaining_percent) [%]"
		echo "remaining capacity = $(cat $bdir/remaining_capacity) [mWh]"
		echo "remaining time     = $(cat $bdir/remaining_running_time_now) [min]"
		echo "Press Ctrl+C to cancel."
		sleep 2
	done

	echo
	echo "Done: battery $bat was completely discharged."
	return 0
}

