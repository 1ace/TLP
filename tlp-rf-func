#!/bin/sh
# tlp - rf switch functions
#
# Copyright (c) 2011 Thomas Koch <linrunner@gmx.net>
# This software is licensed under the GPL v2.

# ----------------------------------------------------------------------------
# Definitions
RFKILL="$(which rfkill 2> /dev/null)"
RFKD="/dev/rfkill"
TEST="$(which test 2> /dev/null)"

# ----------------------------------------------------------------------------
# Functions
get_devc () { # $1: rftype; retval $devc
    local i
    
    check_sysfs "get_devc" "/sys/class/rfkill"

    devc=""
    devs=254
    is2200="0"
    
    case $1 in
        wwan|bluetooth)
            for i in /sys/class/rfkill/rfkill* ; do
                if [ -f $i/type  -a "$(cat $i/type)" = "$1" ]; then 
                    devc="$i/state"
                    echo_debug "rf" "get_devc($1) = $devc"
                    return 0
                fi
            done
            ;;

        wifi)
            if [ -d /sys/bus/pci/drivers/ipw2200 ]; then
                for i in /sys/bus/pci/drivers/ipw2200/*/rf_kill ; do
                    if [ -f $i ]; then
                        devc="$i"
                        is2200="1"
                        echo_debug "rf" "get_devc($1) = $devc [ipw2200]"
                        return 0
                    fi
                done
            else
                for i in /sys/class/rfkill/rfkill* ; do
                    if [ -f $i/type  -a "$(cat $i/type)" = "wlan" ]; then 
                        devc="$i/state"
                        echo_debug "rf" "get_devc($1) = $devc"
                        return 0
                    fi
                done
            fi
            ;;
        
        *)
            echo "Error: unknown device type \"$1\"" 1>&2
            echo_debug "rf" "get_devc($1).unknown_type"
            return 0
            ;;
    esac
    
    echo_debug "rf" "get_devc($1).not_present"
    
    return 0
}

err_no_root_priv () { 
    echo "Error: missing root privilege." 1>&2
    echo_debug "rf" "$1.missing_root_privilege"
    
    return 0
}

get_devs () { # $1: rftype; retval $devs: 0=off/1=on
    if [ -n "$devc" ]; then
        devs=$(cat $devc)
        if [ "$is2200" = "1" ]; then
            devs=$((! $devs))
        fi
    fi

    echo_debug "rf" "get_devs($1) = $devs"
    
    return 0
}

device_state () { # $1: rftype 
    echo_debug "rf" "device_state($1)"
    
    get_devc $1
    get_devs $1 
}


device_on () { # $1: rftype
    echo_debug "rf" "device_on($1)"
    
    get_devc $1
    [ -z "$devc" ] && return 0
    get_devs $1 
    
    if [ "$is2200" = "1" ]; then
        if [ "$(id -u)" = "0" ]; then
            echo_debug "rf" "device_on($1).ipw2200"
            echo -n 0 > $devc
        else
            err_no_root_priv "device_on($1).ipw2200"
        fi
    elif [ -x "$RFKILL" ]; then
        if $TEST "$(id -u)" = "0" -o -w $RFKD ; then
            echo_debug "rf" "device_on($1).rfkill"
            $RFKILL unblock $1
        else
            err_no_root_priv "device_on($1).rfkill"
        fi
    else
        if [ "$(id -u)" = "0" ]; then
            echo_debug "rf" "device_on($1).devc"
            echo -n 1 > $devc
        else
            err_no_root_priv "device_on($1).devc"
        fi
    fi
    
    get_devs $1
    
    return 0
}

device_off () { # $1: rftype
    echo_debug "rf" "device_off($1)"
    
    get_devc $1
    [ -z "$devc" ] && return 0
    get_devs $1 
    
    if [ "$is2200" = "1" ]; then
        if [ "$(id -u)" = "0" ]; then
            echo_debug "rf" "device_off($1).ipw2200"
            echo -n 1 > $devc
        else
            err_no_root_priv "device_off($1).ipw2200"
        fi
    elif [ -x "$RFKILL" ]; then
        if $TEST "$(id -u)" = "0" -o -w $RFKD ; then
            echo_debug "rf" "device_off($1).rfkill"
            $RFKILL block $1
        else
            err_no_root_priv "device_off($1).rfkill"
        fi
    else
        if [ "$(id -u)" = "0" ]; then
            echo_debug "rf" "device_off($1).devc"
            echo -n 0 > $devc
        else
            err_no_root_priv "device_off($1).devc"
        fi
    fi

    get_devs $1
        
    return 0
}

device_toggle () { # $1: rftype
    echo_debug "rf" "device_toggle($1)"

    get_devc $1
    [ -z "$devc" ] && return 0
    get_devs $1 
            
    if [ "$is2200" = "1" ]; then
        if [ "$(id -u)" = "0" ]; then
            echo_debug "rf" "device_toggle($1).ipw2200"
            case $devs in
                0) echo -n 0 > $devc ;;
                1) echo -n 1 > $devc ;;
                *) ;;
            esac
        else
            err_no_root_priv "device_toggle($1).rfkill"
        fi
    elif [ -x "$RFKILL" ]; then
        if $TEST "$(id -u)" = "0" -o -w $RFKD ; then
            echo_debug "rf" "device_toggle($1).rfkill"
            case $devs in
                0) $RFKILL unblock $1 ;;
                1) $RFKILL block $1   ;;                
                *) ;;
            esac
        else
            err_no_root_priv "device_toogle($1).rfkill"
        fi
    else
        if [ "$(id -u)" = "0" ]; then
            echo_debug "rf" "device_toggle($1).devc"
            case $devs in
                0) echo -n 1 > $devc ;;
                1) echo -n 0 > $devc ;;
                *) ;;
            esac
        else
            err_no_root_priv "device_toogle($1).devc"
        fi
    fi
    
    get_devs $1
    
    return 0
}

echo_device_state () { # $1: rftype, $2: state
    case $1 in
        bluetooth)
            devstr="bluetooth"
            ;;
            
        wifi)
            devstr="wifi     "
            ;;
        
        wwan)
            devstr="wwan     "
            ;;
            
        *)
            devstr=$1
            ;;
    esac
    
    case $2 in
        0) 
            echo "$devstr = off (software)"
            ;;

        1) 
            echo "$devstr = on"
            ;;
            
        2) 
            echo "$devstr = off (hardware)"
            ;;
            
        254) 
            echo "$devstr = none (no device)"
            ;;

        *)
            echo "$devstr = unknown state \"$state\""
    esac
    
    return 0
}

