#!/bin/sh
# tlp - display power save and usb autosuspend status
#
# Copyright (c) 2012 Thomas Koch <linrunner at gmx.net>
# This software is licensed under the GPL v2.

# --- Constants
readonly LIBDIRS="/usr/lib/tlp-pm /usr/lib64/tlp-pm"
readonly LIBS="tlp-functions tlp-rf-func"

readonly TLPUSB=/usr/bin/tlp-usblist

readonly SMARTCTL=$(which smartctl 2> /dev/null)
readonly LSBREL=$(which lsb_release 2> /dev/null)
readonly DMIDEC=$(which dmidecode 2> /dev/null)

readonly ASPM=/sys/module/pcie_aspm/parameters/policy
readonly NMIWD=/proc/sys/kernel/nmi_watchdog
readonly TPACPI=/sys/devices/platform/thinkpad_acpi

readonly THERMAL=/proc/acpi/ibm/thermal
readonly CORETEMP=/sys/devices/platform/coretemp.0/temp1_input
readonly FAN=/proc/acpi/ibm/fan

readonly DEBUGLOG=/var/log/debug

# --- Variables
nodebug=1

needs_root_priv=1
show_all=1
show_bat=0
show_conf=0
show_rfkill=0
show_temp=0
show_trace=0

# --- Functions
echoparm () { # $1: file, $2: n/a message, $3: unit, $4: cutoff
    local val
    
    if [ -f $1 ]; then
        val=$(cat $1 2> /dev/null)
        if [ $? = 0 ]; then
            if [ -n "$4" ]; then
                val=${val%$4}
            fi
            if [ -n "$3" ]; then    
                echo "$1 = $val [$3]"
            else
                echo "$1 = $val"
            fi
        else
            if [ -n "$2" ] && [ "$2" != "-" ]; then
                echo "$1 = ($2)"
            else
                echo "$1 = (not available)"
            fi
        fi
    else
        if [ -n "$2" ] && [ "$2" != "-" ]; then
            echo "$1 = ($2)"
        else
            echo "$1 = (not available)"
        fi
    fi
}

show_tpacpi_thresholds () { # $1: BAT0/BAT1; $2: bat # = 1/2
    local start_thresh stop_thresh force
    
    start_thresh=$($TPACPIBAT startChargeThreshold $2 2> /dev/null)
    if [ -n "$start_thresh" ]; then
        [ $start_thresh -eq 0 ] && start_thresh=96
        printf "tpacpi-bat.${1}.startChargeThreshold = %5d [%%]\n" $start_thresh
    else
        printf "tpacpi-bat.${1}.startChargeThreshold = (not available)\n"
    fi

    stop_thresh=$($TPACPIBAT stopChargeThreshold $2 2> /dev/null)
    if [ -n "$stop_thresh" ]; then
        [ $stop_thresh -eq 0 ] && stop_thresh=100
        printf "tpacpi-bat.${1}.stopChargeThreshold  = %5d [%%]\n" $stop_thresh
    else
        printf "tpacpi-bat.${1}.stopChargeThreshold  = (not available)\n"
    fi

    get_force_discharge $2; force=$?
    if [ $force -ne 2 ]; then
        echo "tpacpi-bat.${1}.forceDischarge = $force"
    else
        echo "tpacpi-bat.${1}.forceDischarge = (not available)"
    fi
}

read_args () {
    for a in $*; do
        case $a in
            "-b"|"--battery")
                show_all=0
                show_bat=1
                ;;
                
            "-c"|"--config")
                show_all=0
                show_conf=1
                needs_root_priv=0
                ;;

            "-r"|"--rfkill")
                show_all=0
                show_rfkill=1
                needs_root_priv=0
                ;;

            "-t"|"--temp")
                show_all=0
                show_temp=1
                needs_root_priv=0
                ;;
                
            "-T"|"--trace")
                show_all=0
                show_trace=1
                needs_root_priv=0
                ;;

            *)
                echo "Usage: tlp-stat [-b|--battery|-c|--config|-r|--rfkill|-t|--temp|-T|--trace]"
                exit 1
                ;;
        esac
    done
}
    
# --- Locate and source libraries
for libdir in $LIBDIRS; do [ -d $libdir ] && break; done
if [ ! -d $libdir ]; then
    echo "Error: missing library directory ($LIBDIRS)."
    exit 1
fi

for lib in $LIBS; do 
    if [ ! -f $libdir/$lib ]; then
        echo "Error: missing function library \'$libdir/$lib\'."
        exit 1
    fi
    . $libdir/$lib
done

# --- MAIN
read_args $*

if [ "$needs_root_priv" = "1" ]; then
    check_root
    load_tp_modules
    check_tpacpi
    check_tpsmapi
fi

echo "--- TLP $TLPVER --------------------------------------------"
echo

# --- show configuration
if [ "$show_conf" = "1" ] || [ "$show_all" = "1" ]; then
    if [ -f $CONFFILE ]; then
        . $CONFFILE
        echo "+++ Configured Settings: $CONFFILE"
        egrep -v '^#|^\s*$' $CONFFILE
        echo
    else
        echo "Warning: config file $CONFFILE not present."
        echo
    fi
fi

if [ "$show_all" = "1" ]; then

    # --- show system info
    echo "+++ System Info"
    if [ -n "$DMIDEC" ]; then
        pmanuf="$( $DMIDEC -s system-manufacturer 2> /dev/null | \
                    egrep -iv 'not available|to be filled|DMI table is broken' )"
        pversion="$( $DMIDEC -s system-version 2> /dev/null | \
                    egrep -iv 'not available|to be filled|DMI table is broken' )"
        product="$( $DMIDEC -s system-product-name 2> /dev/null | \
                    egrep -iv 'not available|to be filled|DMI table is broken' )"
        bios="$( $DMIDEC -s bios-version 2> /dev/null | \
                    egrep -iv 'not available|to be filled|DMI table is broken' )"
        
        echo "System = $pmanuf $pversion $product"
        echo "BIOS = $bios"
    fi

    # --- show release & kernel info
    [ -n "$LSBREL" ] && echo "Release = $($LSBREL -d -s)"
    echo "Kernel = $(uname -r -m)"
    echoparm /proc/cmdline
    echo

    # --- show TLP status
    echo "+++ System Status"
    if check_laptop_mode_tools; then
        if [ "$TLP_ENABLE" = "1" ]; then
            echo "TLP power save = enabled"
        else
            echo "TLP power save = not enabled"
        fi
    fi

    # --- show power source
    if get_power_state; then
        echo "power source = ac"
    else
        echo "power source = battery"
    fi
    echo
    
    # --- show cpu info
    echo "+++ Processor"
    for cpuf in /sys/devices/system/cpu/cpu*/cpufreq; do
        echoparm $cpuf/scaling_governor
        if [ -f $cpuf/scaling_governor ]; then
            printf "%s = %8d [kHz]\n" $cpuf/scaling_min_freq $(cat $cpuf/scaling_min_freq)
            printf "%s = %8d [kHz]\n" $cpuf/scaling_max_freq $(cat $cpuf/scaling_max_freq)
            printf "%s = " $cpuf/scaling_available_frequencies
            for freq in $(cat $cpuf/scaling_available_frequencies); do
                printf "%8d" $freq
            done
            printf " [kHz]\n\n"
        fi
    done
    
    for pool in mc smp smt; do
        sdev="/sys/devices/system/cpu/sched_${pool}_power_savings"
        [ -w "$sdev" ] || continue
        echoparm $sdev
    done
    
    # --- show nmi watchdog
    echoparm $NMIWD
    echo

    # --- show voltages
    echo "+++ Undervolting"
    phc_avail=0
    for cpuf in /sys/devices/system/cpu/cpu*/cpufreq; do
        if [ -f $cpuf/phc_controls ]; then
            phc_avail=1
            echoparm "$cpuf/phc_controls        "
            echoparm "$cpuf/phc_default_controls"
            echo
        fi
    done
    if [ $phc_avail = 0 ]; then
        echo "PHC kernel not available."
        echo 
    fi
    
fi # show_all

if [ "$show_temp" = "1" ] || [ "$show_all" = "1" ]; then    
    # --- show temperatures
    echo "+++ Temperatures"
    if [ -f $THERMAL ]; then
        # use thinkpad-specific sysfile
        echo "$THERMAL = $(cat $THERMAL | cut -f2) [°C]"
    else
        # use sensors
        printf "CPU temp               = %5d [°C]\n" $(( $(cat $CORETEMP) / 1000 ))
    fi

    # --- show fan speeed
    if [ -f $FAN ]; then
        # use thinkpad-specific sysfile
        cat $FAN | \
            awk '$1 ~ /speed:/ { printf "'$FAN'     = %5d [/min]\n", $2 }'
    else
        # use hwmon
        for fan in /sys/class/hwmon/hwmon*/device/fan1_input; do
            if [ -f $fan ]; then
                printf "Fan speed              = %5d [/min]\n" $(cat $fan)
                break;
            fi
        done
        if [ ! -f $fan ]; then
            printf "Fan speed              = (not available)\n"
        fi
    fi
    echo
    
fi # show_temp

if [ "$show_all" = "1" ]; then    
    # --- show laptop-mode, dirty buffers params
    echo "+++ File System"
    echoparm /proc/sys/vm/laptop_mode
    echoparm /proc/sys/vm/dirty_writeback_centisecs
    echoparm /proc/sys/vm/dirty_expire_centisecs
    echoparm /proc/sys/vm/dirty_ratio
    echoparm /proc/sys/vm/dirty_background_ratio
    echoparm /proc/sys/fs/xfs/age_buffer_centisecs
    echoparm /proc/sys/fs/xfs/xfssyncd_centisecs   
    echoparm /proc/sys/fs/xfs/xfsbufd_centisecs
    echo 
    
    # --- show disk info form hdparm
    echo "+++ Storage Devices"
    DISK_DEVICES=${DISK_DEVICES:=sda}
    for dev in $DISK_DEVICES; do # iterate all devices
        get_disk_dev $dev
    
        if [ -b /dev/$disk_dev ]; then
            check_disk_hdparm_cap $disk_dev
            if [ $? = 0 ]; then
                echo "/dev/$disk_dev:"
                    
                if [ -n "$disk_id" ]; then
                    echo "          Disk ID   = $disk_id"
                fi
                
                echo -n "          Model     = "
                echo_disk_model $disk_dev
                
                echo -n "          Firmware  = "
                echo_disk_firmware $disk_dev
                
                get_disk_apm_level $disk_dev
                apm=$?
                echo -n "          APM Level = "
                case $apm in
                    0|255) echo "none/disabled" ;;
                    *)     echo $apm ;;
                esac

                get_disk_trim_capability $disk_dev
                trim=$?
                case $trim in
                    0) echo "          TRIM      = not supported" ;;
                    1) echo "          TRIM      = supported" ;;
                esac
                
                echo "          scheduler = $(cat /sys/block/$disk_dev/queue/scheduler | sed -r 's/.*\[(.*)\].*/\1/')"
            
                if [ -n "$SMARTCTL" ]; then
                    # --- show SMART data
                    echo 
                    echo "        SMART info:"
                    $SMARTCTL -A /dev/$disk_dev | grep -v '<==' | \
                      awk -F ' ' '$2 ~ /Start_Stop_Count|Load_Cycle_Count|Reallocated_Sector_Ct|Used_Rsvd_Blk_Cnt_Chip|Used_Rsvd_Blk_Cnt_Tot/ \
                                        { printf "          %3d %-25s = %8d \n", $1, $2, $10 } ; \
                                  $2 ~ /Power_On_Hours/ \
                                        { printf "          %3d %-25s = %8d %s\n", $1, $2, $10, "[h]" } ; \
                                  $2 ~ /Temperature_Celsius/ \
                                        { printf "          %3d %-25s = %8d %s %s %s %s\n", $1, $2, $10, $11, $12, $13, "[°C]" } ; \
                                  $2 ~ /Airflow_Temperature_Cel/ \
                                        { printf "          %3d %-25s = %8d %s\n", $1, $2, $10, "[°C]" } ; \
                                  $2 ~ /Host_Writes/ \
                                        { printf "          %3d %-25s = %8.3f %s\n", $1, $2, $10 / 32768.0, "[TB]" } ; \
                                  $2 ~ /Total_LBAs_Written/ \
                                        { printf "          %3d %-25s = %8.3f %s\n", $1, $2, $10 / 2147483648.0, "[TB]" } ; \
                                  $2 ~ /Available_Reservd_Space|Media_Wearout_Indicator|Wear_Leveling_Count/ \
                                        { printf "          %3d %-25s = %8d %s\n", $1, $2, $4, "[%]" }'
                fi
                echo
            fi
        fi
    done
    echo
    
    # --- show sata alpm mode
    echo "+++ SATA Aggressive Link Power Management"
    cnt=0
    for i in /sys/class/scsi_host/host* ; do
        if [ -f $i/link_power_management_policy ]; then
            echoparm $i/link_power_management_policy
            cnt=$((cnt+1))
        fi
    done
    if [ $cnt = 0 ]; then
        echo "No AHCI-enabled host controller detected."
    fi  
    echo 
    
    # --- show pcie aspm state
    echo "+++ PCIe Active State Power Management"
    if [ -f $ASPM ]; then
        pol=$(cat $ASPM | sed -r 's/.*\[(.*)\].*/\1/')
        echo "$pol" > $ASPM 2> /dev/null
        if [ $? = 0 ]; then
            echo "$ASPM = $pol"
        else
            echo "$ASPM = $pol (disabled by kernel)"
        fi 
    else
        echo "$ASPM = (not available)"
    fi
    echo
    
    # --- show i915 power mgmt
    if [ -d $I915D ]; then 
        echo "+++ Intel Graphics"
        echoparm $I915D/powersave
        echoparm $I915D/i915_enable_rc6
        echoparm $I915D/i915_enable_fbc
        echoparm $I915D/lvds_downclock
        echoparm $I915D/semaphores
        echo
    fi
    
    # --- show radeon power profile
    for card in /sys/class/drm/card[0-9]/device ; do
        if [ -f $card/power_method ] && [ -f $card/power_profile ]; then
            echo "+++ Radeon Graphics"
            echoparm $card/power_method
            echoparm $card/power_profile
            echo
            break
        fi
    done
fi # show_all

if [ "$show_rfkill" = "1" ] || [ "$show_all" = "1" ]; then    
    echo "+++ Wireless"
    # --- show rfkill state
    for i in bluetooth wifi wwan; do
        get_devc $i
        get_devs $i
        echo_device_state $i $devs
    done
    echo
fi # show_rfkill

if [ "$show_all" = "1" ]; then        
    # --- show wifi power mode
    get_wifi_ifaces
    for iface in $WIFACES; do
        if [ -n "$iface" ]; then
            wifipm=$($IWC $iface 2> /dev/null | grep "Power Management" | \
              sed -r 's/.*Power Management:(on|off).*/\1/')
            get_wifi_driver $iface
            echo -n "$iface($WIFIDRV): power management = "
            case $wifipm in
                on)
                    echo "on"
                    ;;
                    
                off)
                    if [ -z "$($IWC $iface power off 2>&1)" ]; then
                        echo "off"
                    else
                        echo "off (disabled by kernel)"
                    fi
                    ;;
                    
                *) 
                    echo "unknown"
                    ;;
            esac
        fi
    done
    [ -n "$WIFACES" ] && echo

    # --- show sound power mode
    echo "+++ Audio"
    if [ -d /sys/module/snd_hda_intel ]; then
        echoparm /sys/module/snd_hda_intel/parameters/power_save
        echoparm /sys/module/snd_hda_intel/parameters/power_save_controller
    fi
    if [ -d /sys/module/snd_ac97_codec ]; then
        echoparm /sys/module/snd_ac97_codec/parameters/power_save
    fi
    echo
    
fi # show_all

if [ "$show_bat" = "1" ] || [ "$show_all" = "1" ]; then
    # --- show battery info & charge thresholds
    
    if [ $tpsmapi -eq 0 ]; then
        # it's a ThinkPad with tp-smapi
        
        for batd in /sys/devices/platform/smapi/BAT[01]; do
            batt=${batd##/*/}
            
            if bat_exists $batt ; then
                case $batt in
                    BAT0) bati=1; echo "+++ ThinkPad Battery (Main)" ;;
                    BAT1) bati=2; echo "+++ ThinkPad Battery (Ultrabay/Slice)" ;;
                    *)    bati=1  echo "+++ ThinkPad Battery" ;;
                esac
                
                echoparm $batd/manufacturer
                echoparm $batd/model
                echoparm $batd/manufacture_date
                echoparm $batd/first_use_date
                echoparm $batd/cycle_count
                echoparm $batd/design_capacity - mWh
                echoparm $batd/last_full_capacity - mWh
                echoparm $batd/remaining_capacity - mWh
                echoparm $batd/remaining_percent - "%"
                echoparm $batd/remaining_running_time_now - min
                echoparm $batd/remaining_charging_time - min
                echoparm $batd/power_now - mW
                echoparm $batd/power_avg - mW
                echo

                if [ "$tpacpi" = "0" ]; then
                    # show thresholds via tpacpi-bat
                    start_thresh=$($TPACPIBAT startChargeThreshold $bati 2> /dev/null)
                    if [ -n "$start_thresh" ]; then
                        [ $start_thresh -eq 0 ] && start_thresh=96
                        printf "tpacpi-bat.${batt}.startChargeThreshold = %5d [%%]\n" $start_thresh
                    else
                        printf "tpacpi-bat.${batt}.startChargeThreshold = (not available)\n"
                    fi

                    stop_thresh=$($TPACPIBAT stopChargeThreshold $bati 2> /dev/null)
                    if [ -n "$stop_thresh" ]; then
                        [ $stop_thresh -eq 0 ] && stop_thresh=100
                        printf "tpacpi-bat.${batt}.stopChargeThreshold  = %5d [%%]\n" $stop_thresh
                    else
                        printf "tpacpi-bat.${batt}.stopChargeThreshold  = (not available)\n"
                    fi

                    get_force_discharge $bati; force=$?
                    if [ $force -ne 2 ]; then
                        echo "tpacpi-bat.${batt}.forceDischarge = $force"
                    else
                        echo "tpacpi-bat.${batt}.forceDischarge = (not available)"
                    fi
                else
                    # show thresholds via tp-smapi
                    echoparm $batd/start_charge_thresh - "%"
                    echoparm $batd/stop_charge_thresh - "%"
                    echoparm $batd/force_discharge
                fi
                echo
            fi
        done
    elif [ -d /sys/class/power_supply ]; then
        # --- show ACPI data
        
        for batd in /sys/class/power_supply/*; do
            if [ -d $batd ] \
                && [ "$(cat $batd/type)" = "Battery" ] \
                && [ "$(cat $batd/present)" = "1" ]; then

                batt=${batd##/*/}
                
                if [ $tpacpi -eq 0 ]; then
                    # it's a ThinkPad with tpacpi-bat only
                    case $batt in
                        BAT0) bati=1; echo "+++ ThinkPad Battery (Main)" ;;
                        BAT1) bati=2; echo "+++ ThinkPad Battery (Ultrabay/Slice)" ;;
                        *)    bati=1; echo "+++ ThinkPad Battery" ;;
                    esac
                else
                    # it's some other laptop model or brand 
                    echo "+++ Battery"
                fi
                if [ -d /sys/devices/platform/thinkpad_acpi ]; then
                    echo -n "Hint: ThinkPad extended battery info not available "
                    case $tpsmapi in
                        2)   echo "(tp-smapi kernel module not loaded)."    ;;
                        255) echo "(tp-smapi kernel module not installed)." ;;
                    esac
                fi
    
                echoparm $batd/manufacturer
                echoparm $batd/model_name
                echoparm $batd/cycle_count 
                if [ -f $batd/energy_full ]; then 
                    echoparm $batd/energy_full_design - mWh 000
                    echoparm $batd/energy_full - mWh 000
                    echoparm $batd/energy_now - mWh 000
                    echoparm $batd/power_now - mW 000
                elif [ -f $bat/charge_full ]; then
                    echoparm $batd/charge_full_design - mAh 000
                    echoparm $batd/charge_full - mAh 000
                    echoparm $batd/charge_now - mAh 000
                    echoparm $batd/current_now - mA 000
                fi
                echoparm $batd/status
                echo

                if [ $tpacpi -eq 0 ]; then
                    # --- show ThinkPad charge thresholds via tpacpi-bat
                    show_tpacpi_thresholds $batt $bati
                    echo
                fi # if $tpcacpi
            fi # if $batd
        done # $batd
    
    fi # if /sys/class/power_supply
    
fi # show_bat

if [ "$show_all" = "1" ]; then
    # -- show runtime pm
    echo "+++ Runtime Power Management"
    for type in $PCID; do
        for device in $type/*; do
            if [ -f $device/class ] && [ -f $device/power/control ]; then
                case $(cat $device/class) in
                    0x020000) # ethernet
                        echoparm $device/power/control - Ethernet
                        ;;
                    
                    0x028000) # wireless
                        echoparm $device/power/control - Wireless
                        ;;
                                        
                    0x040300) # audio
                        echoparm $device/power/control - Audio
                        ;;
                    
                    0x060000) # host bridge
                        echoparm $device/power/control - Host Bridge
                        ;;
                        
                    0x080500) # SD card reader
                        echoparm $device/power/control - SD Card Reader
                        ;;
                        
                    0x088000|0x088001) # card reader
                        echoparm $device/power/control - Card Reader
                        ;;
                        
                    0x0c0000|0x0c0010) # firewire
                        echoparm $device/power/control - Firewire
                        ;;
                esac 
            fi
        done
    done
    echo 
    
    # -- show usb autosuspend
    echo "+++ USB"
    if [ "$USB_AUTOSUSPEND" = "1" ]; then
        echo "tlp usb autosuspend = enabled"
    else
        echo "tlp usb autosuspend = not enabled"
    fi
    echo "tlp usb blacklist = ${USB_BLACKLIST:=(not configured)}"
    echo
    
    if [ -x $TLPUSB ]; then
        $TLPUSB 
    else
        echo "Error: missing subcommand $TLPUSB."
    fi
    echo 

fi # show_all

if [ "$show_trace" = "1" ]; then
    # --- show debug log
    if [ -f $DEBUGLOG ]; then
        grep "tlp\[" $DEBUGLOG
    else
        echo "Error: $DEBUGLOG does not exist."
        echo 
        echo "Solution: create an rsyslog conffile /etc/rsyslog.conf/90-debug.conf with the following contents"
        echo " *.=debug;\\"
        echo " mail,authpriv,cron.none;\\"
        echo " local0,local1,local3,local4,\\"
        echo " local5,local6,local7.none    -/var/log/debug"
        echo "and restart the rsyslog daemon."
        echo
    fi
fi # show_trace

exit 0
